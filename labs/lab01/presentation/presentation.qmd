---
# Preamble

## Author
author:
  name: Шубнякова Дарья НКНбд-01-22
  email: 1132226452@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: Лабораторная работа №1
subtitle: Работа с git
license: CC BY
## Generic options
lang: ru-RU
crossref:
  fig-title: "Рисунок"
  tbl-title: "Таблица"
  lst-title: "Листинг"
## Formats
format:
### Pdf output format
  beamer:
    toc: true
    toc-title: Содержание
    number-sections: true
    colorlinks: false
    toc-depth: 2
    slide-level: 2
    aspectratio: 169
    section-titles: true
    theme: metropolis
    theme-options:
      - progressbar=frametitle
      - sectionpage=progressbar
      - numbering=fraction
    pdf-engine: xelatex
    include-in-header:
      text: |
        \usepackage{fontspec}
        \setmainfont{Times New Roman}
        \setsansfont{Arial}
        \setmonofont{Courier New}
        \usepackage{polyglossia}
        \setdefaultlanguage{russian}
        \setotherlanguage{english}
        \usepackage{caption}
        \captionsetup[figure]{name=Рисунок}

### Html output
  revealjs:
    transition: slide
    margin: 0.2
    smaller: false
    output-ext: html
    theme: beige
    logo: _resources/image/logo_rudn.png
---

# Вводная часть

## Цели и задачи

Ознакомиться с работой git.

Реализовать на практике команды и понять, как они работают.

# Основная часть

## Выполнение лабораторной работы

### Установка имени и электронной почты. Параметры установки окончаний строк. Установка отображения unicode. Создаем страницу «Hello,World».

![](image/1.png){width=70%}

### Чтобы создать git репозиторий из этого каталога, выполняем команду git init. Добавим файл в репозиторий. Используем команду git status, чтобы проверить текущее состояние репозитория.

![](image/2.png){width=70%}

### Добавим кое-какие HTML-теги к нашему приветствию. Меняем содержимое файла hello.html.

![](image/3.png){width=70%}

### Сделаем коммит и проверим состояние.
git commit
Откроется редактор.
В первой строке вводим комментарий: «Added h1 tag». Сохраняем файл и выходим из редактора (для этого в редакторе по-умолчанию (Vim) вам нужно нажать клавишу ESC, ввести :wq и нажать Enter).
Теперь еще раз проверим состояние.

![](image/4.png){width=70%}

### Изменяем страницу «Hello, World», чтобы она содержала стандартные теги <html> и <body>.

![](image/5.png){width=70%}

### Производим коммит проиндексированного изменения (значение по умолчанию), а затем еще раз проверяем состояние.

![](image/6.png){width=70%}

### Сделали коммит второго изменения.

![](image/7.png){width=70%}

### Затем проверяем содержимое файла hello.html. Создаем тег первой версии. Это версия c тегами <html> и <body>, но еще пока без <head>. Давайте сделаем ее версией v1-beta.

![](image/8.png){width=70%}

### Внесем изменение в файл hello.html в виде нежелательного комментария.

![](image/9.png){width=70%}

### Используем команду git checkout для переключения версии файла hello.html в репозитории.

![](image/10.png){width=70%}

### Проиндексируем это изменение.

![](image/11.png){width=70%}

### К счастью, вывод состояния показывает нам именно то, что мы должны сделать для отмены индексации изменения.
git reset HEAD hello.html.

![](image/12.png){width=70%}

### Изменяем файл hello.html на следующий. Выполняем:
git add hello.html
git commit -m "Oops, we didn't want this commit"

![](image/13.png){width=70%}

### Чтобы отменить коммит, нам необходимо сделать коммит, который удаляет изме- нения, сохраненные нежелательным коммитом. Проверка лога показывает нежелательные и отмененные коммиты в наш репозиторий.

![](image/14.png){width=70%}

### Но прежде чем удалить коммиты, давайте отметим последний коммит тегом, чтобы потом можно было его найти.

![](image/15.png){width=70%}

### git tag oops

![](image/16.png){width=70%}

### Создаем директорию lib.

![](image/17.png){width=70%}

### Добавим в страницу комментарий автора (вставим свою фамилию)

![](image/18.png){width=70%}

### Выполним:
git add hello.html
git commit -m "Add an author comment".
Выполним:
ls -C .git/objects
Мы должны увидеть набор каталогов, имена которых состоят из 2 символов. Имена каталогов являются первыми двумя буквами хэша sha1 объекта, хранящегося в git.

![](image/19.png){width=70%}

### Выполним:
git log --max-count=1
Эта команда должна показать последний коммит в репозиторий. SHA1 хэш в вашей системе, вероятно, отличается от моего, но вы увидите что-то наподобие этого

![](image/20.png){width=70%}

### Давайте назовем нашу новую ветку «style». Выполним:
git checkout -b style

![](image/21.png){width=70%}

### Добавим файл стилей style.css

![](image/22.png){width=70%}

### Теперь в вашем проекте есть две ветки. Выполним:
git log --all

![](image/23.png){width=70%}

### git checkout master
cat lib/hello.html
Сейчас мы находимся на ветке master. Это заметно по тому, что файл hello.html не использует стили style.css

![](image/24.png){width=70%}

### Выполним:
git checkout style
cat lib/hello.html
Содержимое lib/hello.html подтверждает, что мы вернулись на ветку style.

![](image/25.png){width=70%}

### Выполним:
git log --graph --all
Добавление опции --graph в git log вызывает построение дерева коммитов с помощью простых ASCII символов.

![](image/26.png){width=70%}

### Слияние переносит изменения из двух веток в одну. Давайте вернемся к ветке style и сольем master с style.
Выполним:
git checkout style
git merge master
git log --graph --all

![](image/27.png){width=70%}

### Вернемся в ветку master и внесем изменения
git checkout master

![](image/28.png){width=70%}

### Используем команду rebase вместо команды merge. Мы вернулись в точку до пер- вого слияния и хотим перенести изменения из ветки master в нашу ветку style. На этот раз для переноса изменений из ветки master мы будем использовать команду git rebase вместо слияния

![](image/29.png){width=70%}

### Выполним:
git checkout master
git merge style
Поскольку последний коммит ветки master прямо предшествует последнему коммиту ветки style, git может выполнить ускоренное слияние-перемотку. При быстрой перемотке вперед git просто передвигает указатель вперед, таким обра- зом указывая на тот же коммит, что и ветка style.
При быстрой перемотке конфликтов быть не может

![](image/30.png){width=70%}

### Создадим клон репозитория. Выполним:
git clone hello cloned_hello
ls

![](image/31.png){width=70%}

### Мы увидели список всех файлов на верхнем уровне оригинального репозитория README.md, index.html и lib

![](image/32.png){width=70%}

### git remote
Мы видим, что клонированный репозиторий знает об имени по умолчанию удаленного репозитория. Давайте посмотрим, можем ли мы получить более подробную информацию об имени по умолчанию:
Выполним:
git remote show origin
Удаленные репозитории обычно размещаются на отдельной машине, возможно, централизованном сервере.

![](image/33.png){width=70%}

### Для того, чтобы увидеть все ветки, попробуем следующую команду:
git branch -a

![](image/34.png){width=70%}

### Внесем следующие изменения в файл README.md: Файл README.md
This is the Hello World example from the git tutorial.

![](image/35.png){width=70%}

### Выполним:
git branch --track style origin/style
git branch -a
git log --max-count=2

![](image/36.png){width=70%}

### Создаем чистый репозиторий
cd ..
git clone --bare hello hello.git
ls hello.git

![](image/37.png){width=70%}

### Файл README.md:
This is the Hello World example from the git tutorial.
(Changed in the original and pushed to shared)
Выполним:
git checkout master
git add README
git commit -m "Added shared comment to readme"

![](image/38.png){width=70%}

### Теперь отправим изменения в общий репозиторий. Выполним:
git push shared master
Выполним:
git remote add shared ../hello.git
git branch --track shared master
git pull shared master
cat README.md

![](image/39.png){width=70%}


# Результаты

Мы настроили git и ознакомились со всеми полезными командами для дальнейшей работы.
